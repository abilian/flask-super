[project]
name = "flask-super"
version = "0.2.10"
description = "Patterns and idioms for Flask applications."
readme = "README.md"
authors = [{ name = "Abilian SAS", email = "sf@abilian.com" }]
# We're uing pattern matching, so we need Python >=3.10
requires-python = ">=3.10,<4"

classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]


dependencies = [
    "flask>=3.0",
    "svcs>=24.1",
    "sentry-sdk>=2",
    "loguru>=0.7",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# ---

[tool.isort]
profile = "black"

# ---

[tool.pytest.ini_options]
filterwarnings = [
    #    'ignore:.*contextfunction.*:DeprecationWarning',
    #    'ignore:.*Unmanaged.*:sqlalchemy.exc.SAWarning'
]
addopts = "--tb=short"
testpaths = [
    "tests",
    "src",
]

# ---

[tool.bandit]
skips = [
    "B404", # blacklist
    "B603", # subprocess_without_shell_equals_true
]

# ---

[tool.pyanalyze]
paths = ["src/"]
import_paths = ["."]

# Additional checks
bare_ignore = true
missing_f = true
use_fstrings = true
value_always_true = true

# TODO: fix issues and activate
#unused_ignore = true
#enforce_no_unused = true
#incompatible_override = true
#missing_parameter_annotation = true
#missing_return_annotation = true
#suggested_parameter_type = true
#suggested_return_type = true
#use_fstrings = true
#value_always_true = true

# TODO: fix issues and remove
#attribute_is_never_set = false
#duplicate_dict_key = false
#import_failed = false
#impossible_pattern = false
#incompatible_argument = false
#incompatible_call = false
#incompatible_return_value = false
#internal_error = false
#missing_return = false
#possibly_undefined_name = false
#undefined_attribute = false
#unused_variable = false

# ---

[tool.deptry]
ignore_obsolete = [
]
ignore_missing = [
]
ignore_transitive = [
]
exclude = [
    '.tox', 'tests', 'sandbox', 'doc', 'scripts',
]


# ---

[tool.pyright]
exclude = [
    '.tox',
    '.nox',
    'tests',
    'sandbox',
    'doc',
    'scripts',
    'tmp',
]
include = ["src"]

# pyright has issues with modules imported from a root __init__.py
reportPrivateImportUsage = false

# Temp
reportGeneralTypeIssues = false
reportMissingImports = false
reportOptionalSubscript = false

[dependency-groups]
dev = [
    "abilian-devtools>=0.7.6",
    "devtools>=0.12.2",
    "pyanalyze>=0.13.1",
    "toml>=0.10.2",
]
